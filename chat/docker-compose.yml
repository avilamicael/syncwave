version: '3.8'

services:
  # ======================
  # Evolution API
  # ======================
  evolution-api:
    container_name: evolution_api
    image: atendai/evolution-api:v2.2.3
    restart: always
    ports:
      - "8080:8080"
    env_file:
      - .env
    volumes:
      - ./data/evolution_instances:/evolution/instances
    depends_on:
      postgres-evolution:
        condition: service_healthy
      postgres-chatwoot:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - evolution-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/manager/fetchInstances"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ======================
  # Chatwoot Base Service
  # ======================
  base: &base
    image: chatwoot/chatwoot:latest
    env_file: .env
    volumes:
      - ./data/storage_data:/app/storage
    networks:
      - evolution-network

  rails:
    <<: *base
    container_name: chatwoot-rails
    depends_on:
      postgres-chatwoot:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=production
      - RAILS_ENV=production
      - INSTALLATION_ENV=docker
    entrypoint: docker/entrypoints/rails.sh
    command: ['bundle', 'exec', 'rails', 's', '-p', '3000', '-b', '0.0.0.0']
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api"]
      interval: 30s
      timeout: 10s
      retries: 3

  sidekiq:
    <<: *base
    container_name: chatwoot-sidekiq
    depends_on:
      postgres-chatwoot:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - NODE_ENV=production
      - RAILS_ENV=production
      - INSTALLATION_ENV=docker
    command: ['bundle', 'exec', 'sidekiq', '-C', 'config/sidekiq.yml']
    restart: always

  # ======================
  # Banco de Dados - Evolution
  # ======================
  postgres-evolution:
    image: postgres:14
    container_name: postgres-evolution
    restart: always
    ports:
      - '5433:5432'  # Porta diferente para evitar conflito
    volumes:
      - ./data/postgres_evolution:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=evolution
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=4b04538b40674e051da71009031921ca
    networks:
      - evolution-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d evolution"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  # ======================
  # Banco de Dados - Chatwoot
  # ======================
  postgres-chatwoot:
    image: pgvector/pgvector:pg16
    container_name: postgres-chatwoot
    command: ["postgres", "-c", "max_connections=1000"]
    restart: always
    ports:
      - '5432:5432'
    volumes:
      - ./data/postgres_chatwoot:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=chatwoot
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=4b04538b40674e051da71009031921ca
    networks:
      - evolution-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d chatwoot"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  # ======================
  # Redis
  # ======================
  redis:
    image: redis:alpine
    container_name: redis
    restart: always
    command: ["sh", "-c", "redis-server --requirepass \"$REDIS_PASSWORD\""]
    env_file: .env
    volumes:
      - ./data/redis_data:/data
    ports:
      - '6379:6379'
    networks:
      - evolution-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "$$REDIS_PASSWORD", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

# ======================
# Networks
# ======================
networks:
  evolution-network:
    name: evolution-network
    driver: bridge

# ======================
# Volumes
# ======================
volumes:
  storage_data:
  postgres_chatwoot:
  postgres_evolution:
  redis_data:
  evolution_instances: